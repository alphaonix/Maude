***(
--- ------------------------------
--- Ordered sorted theories : List
--- ------------------------------

 Of course we don't need to define the natural numbers. They are already
 defined in prelude.maude (module NAT). In this exercise, we shall use a
 non-commutative monoid in order to define a list of natural numbers.

 Central to this definition is the subsort relation: the number 3 is both, a
 natural number but it is also a list with only one element. 

 Note the use of the ternary operator if_then_else_fi in the definition of "in"

 We shall also see a conditional equation (ceq t = t' if C .)

 ***)

fmod MY-LIST is
    pr NAT . --- Importing Maude's definition for natural numbers. 
    sort NeList List . --- Non-empty list and list
    subsort Nat < NeList < List .

    --- Constructors for lists
    op nil : -> List [ctor] . 
    op _;_ : List List -> List [ctor assoc id: nil] .


    --- ------------
    vars N M  : Nat .
    vars L L' : List .
    --- ------------

    --- Adding a number to the list
    op add : Nat List -> NeList .
    eq add(N, L) = N ; L .

    --- Finding the size of a list
    op |_| : List -> Nat .
    eq | nil | = 0 .
    eq | N ; L | = 1 + | L | .

    --- A tail-recursive version
    op size : List -> Nat .
    op $size : List Nat -> Nat . --- auxiliary function
    eq size(L) = $size(L, 0) . --- starting the recursive procedure
    eq $size(nil, M) = M .
    eq $size( (N ; L), M) = $size(L, M + 1) .

    --- Checking if an element is in the list
    op _in_ : Nat List -> Bool .
    eq N in nil = false .
    eq N in (M ; L) = if N == M 
                      then true 
                      else N in L
                      fi 
                      .

    --- an alternative version using conditional equations
    op _in'_ : Nat List -> Bool .
    eq N in' nil = false .
    ceq N in' (M ; L) = true 
        if N == M .
    ceq N in' (M ; L) = N in' L 
        if N =/= M .
endfm

