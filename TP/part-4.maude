***(
--- ----------------------------------
Parametric modules: operations on lists
--- ----------------------------------

Lists are of course already defined in the prelude of Maude. This is indeed a
parametric module allowing lists to be built for different data-types
(implementing the view TRIV). In this exercise, you will use the module
List{Nat} (list of natural numbers) to implement some manipulations on lists.

Note that lists in Maude use the "empty syntax" as a constructor:
op __ : List{X} List{X} -> List{X} [ctor assoc id: nil] .

Hence, 3 4 5 represents the list [3 ; 4 ; 5]

Write the needed equations to define reverse and take-last
***)

fmod MY-LIST is
    pr LIST{Nat} .
    vars N M : Nat .
    vars L L' : List{Nat} .

    --- Reversing the order of the list
    op reverse2 : List{Nat} -> List{Nat} .
    eq reverse2(nil) = nil .
    eq reverse2(L M) = M reverse2(L) .
    

    --- Eliminating the last element of the list
    op take-last : NeList{Nat} -> List{Nat} .
    eq take-last(L M) = L .
    
endfm

---(
Perform the following tests

rew reverse( 1 2 3 4 5 ) .
rew take-last( 1 2 3 4 ) .
---)
