load Bintree.maude

fmod LIST-NAT1 

sort Boolean .
ops T F : -> Boolean [ctor] .
op not_ : Boolean -> Boolean [prec 1] .
op _and_ : Boolean Boolean -> Boolean [prec 2] .
op _or_ : Boolean Boolean -> Boolean [prec 3] .

var B : Boolean .
eq not F = T . eq not T = F .
eq T and B = B . eq F and B = F .
eq T or B = T . eq F or B = B .

sort List .

sort Nat .
	op 0 : -> Nat [ctor] .
	op s : Nat -> Nat [ctor] .
	op _+_ : Nat Nat -> Nat .
	
	vars M N : Nat .
	
	eq 0 + M = M .
	eq s(M) + N = s(M + N) .

op _<_ : Nat Nat -> Boolean .
op half : Nat -> Nat .
op _monus_ : Nat Nat -> Nat .
op diff : Nat Nat -> Nat .
ops odd even : Nat -> Boolean .
ops _<=_ _>_ _>=_ _==_ _=\=_ : Nat Nat -> Boolean .

eq 0 < s(M) = T .
eq M < 0 = F .
eq s(M) < s(N) = M < N .

eq diff(0 , M) = M .
eq diff(M , 0) = M .
eq diff(s(M) , s(N)) = diff(M, N) .

eq half(0) = 0 .
eq half(s(0)) = 0 .
eq half(s(s(M))) = half(M) + s(0) .

eq 0 monus M = 0 .
eq N monus 0 = N .
eq s(N) monus s(M) = N monus M .

eq even(0) = T .
eq even(s(0)) = F .
eq odd(0) = F .
eq odd(s(0)) = T .

eq even(s(s(M))) = even(M) .
eq odd(s(s(M))) = odd(M) .

eq 0 =\= 0 = F .
eq s(M) =\= 0 = T .
eq 0 =\= s(M) = T .
eq s(M) =\= s(N) = (M =\= N) .

eq 0 <= s(M) = T .
eq 0 <= 0 = T .
eq s(M) <= 0 = F .
eq s(M) <= s(N) = M <= N .

eq 0 > M = F .
eq s(M) > 0 = T .
eq s(M) > s(N) = M > N .

eq 0 == 0 = T .
eq s(M) == 0 = F .
eq 0 == s(M) = F .
eq s(M) == s(N) = (M == N) .

eq 0 >= s(M) = F .
eq 0 >= 0 = T .
eq s(M) >= 0 = T .
eq s(M) >= s(N) = M >= N .

op nil : -> List [ctor] .
op _ _ : List Nat -> List [ctor] .
op length : List -> Nat . *** tamanho da lista                          *** OK.
op concat : List List -> List . *** concatena duas listas.		*** OK.
op insertFront : Nat List -> List . *** insere o elemento na frente.	*** OK.
ops first last : List -> Nat . *** primeiro/ultimo elemento.		*** OK.
op empty? : List -> Boolean . *** Se a lista eh vazia.		*** OK.
op rest : List -> List . *** Remove o primeiro elemento.		*** OK.
op reverse : List -> List . *** Lista ao contrario.			*** OK.
op _occursIn_ : Nat List -> Boolean . *** elemento ocorre na lista.	*** OK.
op remove : Nat List -> List . *** Remove elementos.			*** OK.
op max : List -> Nat . *** o elemento da lista que tem o maior valor).	*** OK.
op isSorted : List -> Boolean . *** lista ordenada) ordem crescente.	*** OK.
vars N' : Nat . vars L L' : List .

eq length(nil) = 0 .
eq length(L N) = s(length(L)) .

eq concat(L, nil) = L .
eq concat(L, L' N) = concat(L, L') N .

eq first(nil) = 0 . *** Default/error value
eq first(nil N) = N .
eq first(L N N') = first(L N) .

eq insertFront(N, nil) = nil N .
eq insertFront(N, L N') = insertFront(N, L) N' .

eq last(nil) = 0 .
eq last(L N) = N .

eq empty?(nil) = T .
eq empty?(L N) = F .

eq rest(nil) = nil .
eq rest(nil N) = nil .
eq rest(L N N') = rest(L N) N' .

eq reverse(nil) = nil .
eq reverse(L N) = concat(nil N, reverse(L)).

eq N occursIn(nil) = F .
eq N occursIn (L N') = (N == N') or (N occursIn L) .

eq remove(N, nil) = nil .
ceq remove(N, L N') = remove(N, L) N' if (N' == N) = F .
ceq remove(N, L N') = remove(N, L) if (N' == N) = T .

eq max(nil) = 0 .
ceq max(L N) = max(L) if max(L) > N = T .
ceq max(L N) = N if max(L) > N = F .

***eq isSorted(nil) = T .
***ceq isSorted(L N) = isSorted(L) if N >= max(L) = T .
***ceq isSorted(L N) = F if N >= max(L) = F .

eq isSorted(nil) = T .
ceq isSorted(L N N') = isSorted(L N) if N <= N' = T .
ceq isSorted(L N N') = F if N <= N' = F .
eq isSorted(nil N) = T . 

***eq isSorted(nil) = T .
***eq isSorted(L N N') = isSorted(L N) and (N <= N') .
***eq isSorted(nil N) = T .





 
 



endfm
