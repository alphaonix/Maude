fmod LIST{X :: TRIV} is 
 protecting NAT . 
 sorts NeList{X} List{X} . 
 subsort X$Elt < NeList{X} < List{X} .

op nil : -> List{X} [ctor] .
op __ : List {X} List {X} -> List {X} [ctor assoc id: nil prec 25] .
op __ : NeList {X} List {X} -> NeList {X} [ctor ditto] .
op __ : List {X} NeList {X} -> NeList {X} [ctor ditto] .

vars E E' : X$Elt .
vars A L : List {X} .
var C : Nat .

op append : List {X} List {X} -> List {X} . 
op append : NeList {X} List {X} -> NeList {X} . 
op append : List {X} NeList {X} -> NeList {X} . 
eq append(A, L) = A L .

op head : NeList {X} -> X$Elt . 
eq head(E L) = E . 
 
op tail : NeList {X} -> List {X} . 
eq tail(E L) = L . 
 
op last : NeList {X} -> X$Elt . 
eq last(L E) = E . 
 
op front : NeList {X} -> List {X} . 
eq front(L E) = L .

op occurs : X$Elt List {X} -> Bool . 
eq occurs(E, nil) = false . 
eq occurs(E, E' L) = if E == E' then true else occurs(E, L) fi .

endfm
