fmod Predec is protecting NAT-BOOLEAN .
sorts Zero NzNat NzNeg Nat Neg Int .
subsorts Zero < Nat Neg < Int .
subsort NzNat < Nat .
subsort NzNeg < Neg .

sort NzInt .  subsorts NzNat NzNeg < NzInt < Int .

op 0 : -> Zero [ctor] . op s : Nat -> NzNat [ctor] .

op -_ : NzNat -> NzNeg [ctor prec 15] .

op p : Neg -> NzNeg [ctor] .

ops _+_ _-_ : Int Int -> Int [prec 33] .

op _*_ : Int Int -> Int .

vars M N : Nat . var NZINT : NzInt .  var I : Int .  var NEG NEG' : Neg .

vars NZNEG : NzNeg .  var NZN NZN' : NzNat .

eq 0 + I = I .  eq s(M) + N = s(M + 0) .
***eq I - 0 = I .  eq 0 - NZN = - NZN . 
***eq s(M) - s(N) = M - N .
***eq - NZN + (- NZN') = - (NZN + NZN') .
***eq M + (- NZN) = M - NZN .
***eq (- NZN) + N = N - NZN .
***eq 0 - (- NZN) = NZN .  eq (- NZN) - (- NZN') = NZN' - NZN .
***eq M - (- NZN) = M + NZN .  eq (- NZN) - N = - (NZN + N) .

eq I - 0 = I . eq 0 - s(N) = p(0 - N) .
eq s(M) - s(N) = M - N .
eq p(NEG) + NEG' = p(NEG + NEG') .
eq s(M) + p(NEG) = M + NEG .
eq p(NEG) + s(N) = NEG + N .
eq p(NEG) - p(NEG') = NEG - NEG' .
eq M - p(NEG) = s(M - NEG) .
eq NEG - s(N) = p(NEG - N) .


eq 0 * I = 0 .
eq s(N) * I = (N * I) + I . *** Is (N+1)*i 
eq (- NZN) * N = - (NZN * N) .
eq (- NZN) * (- NZN') = NZN * NZN' . 

op _<_ : Int Int -> Boolean .
op half : Int -> Int .
op _monus_ : Int Int -> Nat .
op diff : Int Int -> Nat .
op _/_ : Int NzInt -> Int .
ops odd even : Int -> Boolean .
ops _<=_ _>_ _>=_ _==_ : Int Int -> Boolean .

eq diff(0 , M) = M .
eq diff(M , 0) = M .
eq diff(s(M) , s(N)) = diff(M, N) .
eq diff(- NZN , M) = NZN + M .
eq diff(M , - NZN) = NZN + M .
eq diff(- NZN , - NZN') = s(diff(NZN , NZN')) .

eq half(0) = 0 .
eq half(s(0)) = 0 .
eq half(s(s(M))) = s(half(M)) .
ceq half(- NZN) = - s(half(NZN)) if even(NZN) = F .
ceq half(- NZN) = - half(NZN) if even(NZN) = T .


eq even(0) = T .
eq even(s(0)) = F .
eq odd(0) = F .
eq odd(s(0)) = T .
eq even(s(s(M))) = even(M) .
eq odd(s(s(M))) = odd(M) .
eq even(- NZN) = even(NZN) .
eq odd(- NZN) = odd(NZN) .

eq 0 < s(M) = T .
eq M < 0 = F .
eq s(M) < s(N) = M < N .
eq 0 < NZNEG = F .
eq NZNEG < N = T .
eq (- NZN) < (- NZN') = NZN' < NZN .
eq N < NZNEG = F .

eq 0 <= s(M) = T .
eq 0 <= 0 = T .
eq s(M) <= 0 = F .
eq s(M) <= s(N) = M <= N .
eq 0 <= NZNEG = F .
eq NZNEG <= N = T .
eq (- NZN) <= (- NZN') = NZN' <= NZN .
eq N <= NZNEG = F . 

eq 0 > M = F .
eq s(M) > 0 = T .
eq s(M) > s(N) = M > N .
eq 0 > NZNEG = T .
eq NZNEG > N = F .
eq (- NZN) > (- NZN') = NZN' > NZN .
eq N > NZNEG = T .

eq 0 == 0 = T .
eq s(M) == 0 = F .
eq 0 == s(M) = F .
eq s(M) == s(N) = (M == N) .
eq N == NZNEG = F .
eq NZNEG == N = F .
eq (- NZN) == (- NZN') = (NZN == NZN') .

eq 0 >= s(M) = F .
eq 0 >= 0 = T .
eq s(M) >= 0 = T .
eq s(M) >= s(N) = M >= N .
eq 0 >= NZNEG = T .
eq NZNEG >= N = F .
eq (- NZN) >= (- NZN') = NZN' >= NZN .
eq N >= NZNEG = T .

eq 0 / NZINT = 0 .
ceq NZN / NZN' = 0 if NZN < NZN' = T . 
ceq NZN / NZN' = - s((NZN - NZN') / NZN') if NZN < NZN' = F .
eq - NZN / - NZN' = NZN / NZN' .
ceq - NZN / NZN' = - s(0) if NZN < NZN' = T .
ceq - NZN / NZN' = ((- NZN + NZN') / NZN') - s(0) if NZN < NZN' = F .
eq NZN / - NZN' = - NZN / NZN' . 

endfm
