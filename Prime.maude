fmod PRIME is protecting NAT .

op isPrimeAux : NzNat NzNat -> Bool .
op isPrime : NzNat -> Bool .
op _and2_ : Bool Bool -> Bool [strat (1 0)] . 

vars B : Bool .
vars N N' : Nat .
vars P P' : NzNat .

eq true and2 B = B .        
eq false and2 B = false .

*** op _divides_ : NzNat Nat -> Bool [...] .

eq isPrimeAux (P, 1) = true .
eq isPrimeAux (P, s (P')) = (not ((s P') divides P)) and2 isPrimeAux (P, P') .

eq isPrime (1) = false .
ceq isPrime (s N) = isPrimeAux ((s N), N) if N > 0 = true .

endfm
