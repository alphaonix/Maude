***(
--- ---------------
--- Modules : Rules
--- ---------------
Now we shall describe the transitions of the system using rules. Consider a
simple file-transfer protocol:

 - the blocks of the file will be represented with a list of natural numbers
 - The sender and the receiver are modeled as "objects"
 - A block is "synchronously" transmitted at a time

We shall use the module CONFIGURATION that provides some infrastructure for
modeling distributed objects. 

 ***)

mod FILE-TRANSFER is
    --- Some definitions that make easier the definition of distributed object systems
    pr CONFIGURATION .
    pr LIST{Nat} .

    --- ------------------------
    var n       : Nat .
    vars L L'   : List{Nat} .
    var  C      : Configuration .
    --- ------------------------

    --- Class identifiers (Sort Cid)
    op Sender : -> Cid [ctor] . 
    op Receiver : -> Cid [ctor].


    --- Object identifiers (Sort Oid)
    ops S R : -> Oid [ctor] .

    --- Attributes for objects (sort Attribute)
    op file:_ : List{Nat} -> Attribute [ctor] .


    --- An object is a term of the shape < o : C | at1, ..., atn >
    --- A configuration is a multiset of objects (empty syntax)


    --- Generating the list 1 2 3 4 ... n
    op generate-blocks : Nat -> List{Nat} .
    eq generate-blocks(0) = nil .
    eq generate-blocks(s(n)) = generate-blocks(n) n .

    --- The initial state of the system
    op init-state : Nat -> Configuration .
    eq init-state(n) = < S : Sender   | file: generate-blocks(n) >
                       < R : Receiver | file: nil >
                       .

    --- A step in the system: sending one block
    rl [copy] : < S : Sender   | file: (n L)  >
                < R : Receiver | file:   L'   > 
                =>
                < S : Sender   | file:   L    >
                < R : Receiver | file: (L' n) > 
                .
endm

***(

Try the following commands

--- The initial state
red init-state(5) .

--- One step in the protocol
rew [1] init-state(5) .

--- (Finite state system... so we can rewrite at will)
rew init-state(5) .

--- Final configuration (=>! find normal forms)
search init-state(5) =>! C .

***)
