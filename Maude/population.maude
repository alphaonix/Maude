mod POPULATION is protecting NAT + STRING .
	sorts Person Population Status .
	subsort Person < Population .
	op empty : -> Population [ctor] .
	op _ _ : Population Population -> Population [ctor assoc comm id: empty] .

	op person : String Nat Status -> Person [ctor] .
	ops single divorced : -> Status [ctor] .
	ops engaged separated : String -> Status [ctor] .
	op married : Nat String -> Status [ctor] .
	op isMarried : Status -> Bool .
	
	vars X X' : String . vars M N H : Nat . vars S S' : Status .

eq isMarried(married(M,X)) = true .
eq isMarried(S) = false [owise] .

crl [birthday] :
	person(X, N, S) => person(X, N + 1, S)
	if (isMarried(S)) /\ N <= 100 .
	
crl [singleage] :
	person (X, N, S) => person(X, N, single)
	if S =/= divorced .

crl [engagement] :
	person(X, N, S) person(X', M, S') => person(X, N, engaged(X')) person(X', M, engaged(X))
	if (S == single or S == divorced) /\ N >= 16 /\ (S' == single or S' == divorced) /\ M >= 16 .

rl [wedding] :
	person(X, N, engaged(X')) person(X', M, engaged(X)) => person(X, N, married(0,X')) person(X', M, married(0,X)) .
	
crl [Married] : 
	person(X, N, married(H,X')) person(X', M, married(H,X)) => person(X, N + 1, married(H + 1,X')) person(X', M + 1, married(H + 1,X))
	if N <= 100 /\ M <= 100 .
		
crl [separation] :
	person(X, N, married(H,X')) person(X', M, married(H,X)) => person(X, N, separated(X')) person(X', M, separated(X))
	if H >= 2 .

rl [divorce] :
	person(X, N, separated(X')) person(X', M, separated(X)) => person(X, N, divorced) person(X', M, divorced) .

endm
	*** search [1] person("teste1",23,engaged("teste2")) person("teste2",20,engaged("teste1")) =>* person("teste1",25,married(2,"teste2")) person("teste2",22,married(2,"teste1")) .
